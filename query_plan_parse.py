import sys
import re
import string
import os.path
import time
from datetime import timedelta
from Tkinter import Tk # for clipboard




class PlanParser:
  def __init__ (self, filename = None, content = None):
    self.res = {}
    if not (filename is None):
      with open(filename, 'r') as fl:
        self.content = fl.read().split("\n")
    if not (content is None):
      self.content = content.split ("\n")



  def add(self, table, scan):
    q = 0
    st = {}
    if scan in self.res.keys():
      st = self.res[scan]
      if table in st.keys():
        q = st[table] + 1
      else:
        q = 1
      st[table] = q
    else:
      st[table] = 1
    self.res[scan] = st



  def add2 (self, table, scan, line):
    q = 0
    st = {}
    if scan in self.res.keys():
      st = self.res[scan]
      if table in st.keys():
        tt = st[table]
        tt['count'] = tt['count'] + 1
        tt['lines'].append (line)
      else:
        tt = {}
        tt['count'] = 1
        tt['lines'] = []
        tt['lines'].append(line)
      st[table] = tt
    else:
      tt = {}
      tt['count'] = 1
      tt['lines'] = []
      tt['lines'].append(line)
      st[table] = tt
    self.res[scan] = st
   

  

  def print_res(self):
    #print self.res


    for scanType in self.res.keys():
      print "\n" + scanType
      st = self.res[scanType]
      for table in st.keys():
        tt = st[table]
        lines, q = ("", 0)
        for i in tt['lines']:
          lines += ", %s" % i
          q += 1
          if q > 10:
            lines += ", ..."
            break

        print "\t%-30s \t %d times \t at line(s): %s" % (table, tt['count'], lines[2:])


  def parse(self):
    pass
    done = 1
    tn = 0
    op = 0
    table = '' 
    scantype = ''
    lc = 0
    line_number = 0
    
    for line in self.content:
      if (done == 1):
        table    = ''
        scantype = ''

      #searching for line number
      if (line.find('at line') != -1):
        line_number = re.findall('at line (\d*)' , line)[0]

      if (line.find('FROM TABLE') != -1):
        done = 0
        tn = 1
        continue

      if (tn == 1):
        table = line.strip()
        tn = 0
        op = 1
        continue

      if (op == 1):
        if (line.lower().find ('scan') != -1):
          #print 'debug => ' + line
          scantype = line.strip()
          op +=1
        continue

      if (op == 2):          
        scantype += ' ' + line.strip()
        self.add2(table, scantype, line_number)
        lc += 1
        done = 1
        op = 0
        tn = 0

      #if (lc > 30):
      #  break





def main():
#  if len(sys.argv) != 2: # generating some usage info, if there's not enought parameters
#    print "Sybase query plan parser"
#    print "Script process file with query plan (generated by 'set showplan on' query)\n"
#    print "Usage: python " + sys.argv[0] + " %in_file_name% \n\t%in_file_name%\tfull file name with query plan to parse"
#    sys.exit(1)

  if (len(sys.argv) == 2):
    in_file  = sys.argv[1]
    if os.path.isfile(in_file) == False: # chech if input file exists
      print "ERROR: file [" + in_file + "] doesn't exists"
      sys.exit(1)
    parser = PlanParser(filename = in_file)
  else:
    r = Tk()
    r.withdraw()
    content = r.clipboard_get()
    parser = PlanParser(content = content)


  parser.parse()
  parser.print_res()

   

  









if __name__ == '__main__':
    main()
